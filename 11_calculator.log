var x = 100;
undefined
var adder = function(){};//Anonymous function / Function Expression
undefined
typeof adder;
'function'
adder();
undefined
adder = 100;
100
adder();
VM899:1 Uncaught TypeError: adder is not a function
    at <anonymous>:1:1
(anonymous) @ VM899:1
a();
var a = function(){
    console.log("hi dude");
}
VM997:1 Uncaught TypeError: a is not a function
    at <anonymous>:1:1
(anonymous) @ VM997:1
function Calc(){
    var add = function(x,y){
        return x + y;
    }
    var sub = function(x,y){
        return x - y;
    }
    return [add, sub];
}
undefined
Calc([0](10,2));
VM1249:1 Uncaught TypeError: [0] is not a function
    at <anonymous>:1:9
(anonymous) @ VM1249:1
Calc()[0](10,2);
12
Calc()[1](10,2);
8
Calc().add();
VM1321:1 Uncaught TypeError: Calc(...).add is not a function
    at <anonymous>:1:8
(anonymous) @ VM1321:1
function Calc(){
    var add = function(x,y){
        return x + y;
    }
    var sub = function(x,y){
        return x - y;
    }
    return {add, sub};
}
undefined
Calc();
{add: ƒ, sub: ƒ}
Calc().add(10,20);
30
function Calc(m){
    var add = function(x,y){
        return x + y + m;
    }
    var sub = function(x,y){
        return x - y - m;
    }
    return {add, sub};
}
undefined
var obj = Calc(100);
undefined
obj;
{add: ƒ, sub: ƒ}add: ƒ (x,y)arguments: nullcaller: nulllength: 2name: "add"prototype: {constructor: ƒ}[[FunctionLocation]]: VM1455:2[[Prototype]]: ƒ ()[[Scopes]]: Scopes[2]0: Closure (Calc) {m: 100}1: Global {window: Window, self: Window, document: document, name: '', location: Location, …}sub: ƒ (x,y)[[Prototype]]: Object
obj.add(10,20);
130
function evenOdd(num){
    return num%2==0?"Even no " + num:" Odd no " + num;
}
function cube(num){
    return num**3;
}
function loop(n, fn){
    for(var i = 1; i<=n;i++){
        console.log(fn(i));
    }
}
undefined
loop(5,evenOdd);
VM1834:9  Odd no 1
VM1834:9 Even no 2
VM1834:9  Odd no 3
VM1834:9 Even no 4
VM1834:9  Odd no 5
undefined
loop(5,cube);
VM1834:9 1
VM1834:9 8
VM1834:9 27
VM1834:9 64
VM1834:9 125
undefined
var arr = [10,20,30,40];
arr.map(function(element){
   return element + element * 0.18;
});
(4) [11.8, 23.6, 35.4, 47.2]
arr;
(4) [10, 20, 30, 40]
function add(num1,num2){
    return num1 + num2;
}
function sub(num1,num2){
    return num1 - num2;
}
function mul(num1,num2){
    return num1 * num2;
}
function div(num1,num2){
    return num1/num2;
}
function operate(num1,num2,fn){
    var obj = {1:add,2:sub,3:mul,4:div};
    console.log(obj[fn]);
}
undefined
operate(2,3,1);
VM2619:15 ƒ add(num1,num2){
    return num1 + num2;
}
undefined
function add(num1,num2){
    return num1 + num2;
}
function sub(num1,num2){
    return num1 - num2;
}
function mul(num1,num2){
    return num1 * num2;
}
function div(num1,num2){
    return num1/num2;
}
function operate(num1,num2,fn){
    var obj = {1:add,2:sub,3:mul,4:div};
    console.log(obj[fn]());
}
undefined
operate(2,3,1);
VM2680:15 NaN
undefined
function add(num1,num2){
    return num1 + num2;
}
function sub(num1,num2){
    return num1 - num2;
}
function mul(num1,num2){
    return num1 * num2;
}
function div(num1,num2){
    return num1/num2;
}
function operate(num1,num2,fn){
    var obj = {1:add(),2:sub(),3:mul(),4:div()};
    console.log(obj[fn]);
}
undefined
operate(2,3,1);
VM2741:15 NaN
undefined
function add(num1,num2){
    return num1 + num2;
}
function sub(num1,num2){
    return num1 - num2;
}
function mul(num1,num2){
    return num1 * num2;
}
function div(num1,num2){
    return num1/num2;
}
function operate(num1,num2,fn){
    var obj = {1:add,2:sub,3:mul,4:div};
    console.log(obj[fn]);
}
undefined
operate(2,3,1);
VM2767:15 ƒ add(num1,num2){
    return num1 + num2;
}
undefined

function operate(num1,num2,fn){
    var obj = {1:add,2:sub,3:mul,4:div};
    function add(num1,num2){
    return num1 + num2;
}
function sub(num1,num2){
    return num1 - num2;
}
function mul(num1,num2){
    return num1 * num2;
}
function div(num1,num2){
    return num1/num2;
}
    console.log(obj[fn]);
}
undefined
operate(2,3,1);
VM2781:16 ƒ add(num1,num2){
    return num1 + num2;
}
undefined
function add(num1,num2){
    return num1 + num2;
}
function sub(num1,num2){
    return num1 - num2;
}
function mul(num1,num2){
    return num1 * num2;
}
function div(num1,num2){
    return num1/num2;
}
function operate(num1,num2,fn){
    var obj = {1:add,2:sub,3:mul,4:div};
    console.log(obj[fn]());
}
undefined
operate(2,3,1);
VM2805:15 NaN
undefined
function add(num1,num2){
    return num1 + num2;
}
function sub(num1,num2){
    return num1 - num2;
}
function mul(num1,num2){
    return num1 * num2;
}
function div(num1,num2){
    return num1/num2;
}
function operate(num1,num2,fn){
    var obj = {1:add,2:sub,3:mul,4:div};
    console.log(obj[fn]);
}
undefined
operate(2,3,1);
VM2836:15 ƒ add(num1,num2){
    return num1 + num2;
}
undefined
function add(num1,num2){
    return num1 + num2;
}
function sub(num1,num2){
    return num1 - num2;
}
function mul(num1,num2){
    return num1 * num2;
}
function div(num1,num2){
    return num1/num2;
}
function operate(num1,num2,fn){
    var obj = {1:add,2:sub,3:mul,4:div};
    var res = obj[fn];
    console.log(res);
}
undefined
operate(2,3,1);
VM2915:16 ƒ add(num1,num2){
    return num1 + num2;
}
undefined
function add(num1,num2){
    return num1 + num2;
}
function sub(num1,num2){
    return num1 - num2;
}
function mul(num1,num2){
    return num1 * num2;
}
function div(num1,num2){
    return num1/num2;
}
function operate(num1,num2,fn){
    var obj = {1:add,2:sub,3:mul,4:div};
    var res = obj[fn(num1,num2)];
    console.log(res);
}
undefined
operate(2,3,1);
VM2962:15 Uncaught TypeError: fn is not a function
    at operate (<anonymous>:15:19)
    at <anonymous>:1:1
operate @ VM2962:15
(anonymous) @ VM2967:1
function add(num1,num2){
    return num1 + num2;
}
function sub(num1,num2){
    return num1 - num2;
}
function mul(num1,num2){
    return num1 * num2;
}
function div(num1,num2){
    return num1/num2;
}
function operate(num1,num2,fn){
    var obj = {1:add,2:sub,3:mul,4:div};
    var res = obj[fn](num1,num2);
    console.log(res);
}
undefined
operate(2,3,1);
VM3009:16 5
undefined
